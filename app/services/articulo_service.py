"""
üìã Servicio de Art√≠culo - Gesti√≥n de art√≠culos del inventario

Este servicio maneja todas las operaciones relacionadas con los art√≠culos,
que son la entidad central que puede ser tanto productos como packs.
"""

from typing import List, Optional, Dict, Any
from fastapi import HTTPException
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError

from app.models.articulo import Articulo
from app.models.familia import Familia
from app.models.producto import Producto
from app.models.pack import Pack
from app.schemas.articuloDTO import ArticuloCreate, ArticuloResponse, ArticuloUpdate
from .base_service import BaseService
import logging

logger = logging.getLogger(__name__)


class ArticuloService(BaseService):
    """
    üìã Servicio para gesti√≥n de art√≠culos
    
    Maneja operaciones espec√≠ficas de art√≠culos incluyendo:
    - CRUD b√°sico de art√≠culos
    - Relaci√≥n polim√≥rfica con productos y packs
    - Consultas por familia
    - Validaciones de negocio espec√≠ficas
    """
    
    def __init__(self, db_session: Session):
        """
        Constructor del servicio de art√≠culos
        
        Args:
            db_session (Session): Sesi√≥n de base de datos SQLAlchemy
        """
        super().__init__(db_session, Articulo)
        
    def crear_articulo( self, nuevo_articulo: ArticuloCreate) -> ArticuloResponse:
        """
        Crear un nuevo art√≠culo con validaciones
        
        Args:
            nuevo_articulo (ArticuloCreate): Datos del art√≠culo a crear
        Returns:
            articulo (ArticuloResponse): Art√≠culo creado
        Raises:
            ValueError: Si hay errores de validaci√≥n
            SQLAlchemyError: Error en la operaci√≥n de base de datos
        """
        try:
            # Validar que la familia existe
            id_familia = nuevo_articulo.id_familia
            if id_familia:
                familia = self.db.query(Familia).filter(Familia.id == id_familia).first()
                if not familia:
                    raise ValueError(f"La familia con ID {id_familia} no existe")

            codigo = nuevo_articulo.codigo     
            # Validar que el c√≥digo sea √∫nico si se proporciona
            if codigo:
                articulo_existente = self.obtener_por_codigo(codigo)
                if articulo_existente:
                    raise ValueError(f"Ya existe un art√≠culo con el c√≥digo '{codigo}'")
                    
            articulo = self.crear(**nuevo_articulo.model_dump())
            
            logger.info(f"‚úÖ Art√≠culo '{articulo.nombre}' creado exitosamente")
            return articulo
            
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error creando art√≠culo '{articulo.nombre}': {e}")
            raise
            
    def obtener_por_nombre(self, nombre: str) -> Optional[ArticuloResponse]:
        """
        Obtener un art√≠culo por su nombre
        
        Args:
            nombre (str): Nombre del art√≠culo a buscar
            
        Returns:
            Optional[ArticuloResponse]: Art√≠culo encontrado o None
        """
        try:
            return self.db.query(Articulo).filter(Articulo.nombre == nombre).first()
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error buscando art√≠culo por nombre '{nombre}': {e}")
            raise
            
    def obtener_por_codigo(self, codigo: str) -> Optional[ArticuloResponse]:
        """
        Obtener un art√≠culo por su c√≥digo
        
        Args:
            codigo (str): C√≥digo del art√≠culo a buscar
            
        Returns:
            Optional[ArticuloResponse]: Art√≠culo encontrado o None
        """
        try:
            return self.db.query(Articulo).filter(Articulo.codigo == codigo).first()
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error buscando art√≠culo por c√≥digo '{codigo}': {e}")
            raise
            
    def obtener_por_familia(self, familia_id: int) -> List[ArticuloResponse]:
        """
        Obtener todos los art√≠culos de una familia espec√≠fica
        
        Args:
            familia_id (int): ID de la familia
            
        Returns:
            List[ArticuloResponse]: Lista de art√≠culos de la familia
        """
        try:
            return self.db.query(Articulo).filter(Articulo.id_familia == familia_id).all()
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error obteniendo art√≠culos de familia {familia_id}: {e}")
            raise
        
            
    def obtener_producto_asociado(self, articulo_id: int) -> Optional[Producto]:
        """
        Obtener el producto asociado a un art√≠culo (relaci√≥n polim√≥rfica)
        
        Args:
            articulo_id (int): ID del art√≠culo
            
        Returns:
            Optional[Producto]: Producto asociado o None
        """
        try:
            return self.db.query(Producto).filter(Producto.id_articulo == articulo_id).first()
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error obteniendo producto de art√≠culo {articulo_id}: {e}")
            raise
            
    def obtener_pack_asociado(self, articulo_id: int) -> Optional[Pack]:
        """
        Obtener el pack asociado a un art√≠culo (relaci√≥n polim√≥rfica)
        
        Args:
            articulo_id (int): ID del art√≠culo
            
        Returns:
            Optional[Pack]: Pack asociado o None
        """
        try:
            return self.db.query(Pack).filter(Pack.id_articulo == articulo_id).first()
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error obteniendo pack de art√≠culo {articulo_id}: {e}")
            raise
            
    def obtener_tipo_articulo(self, articulo_id: int) -> Optional[str]:
        """
        Determinar el tipo de art√≠culo (producto o pack)
        
        Args:
            articulo_id (int): ID del art√≠culo
            
        Returns:
            Optional[str]: 'producto', 'pack' o None si no existe
        """
        try:
            producto = self.obtener_producto_asociado(articulo_id)
            if producto:
                return 'producto'
                
            pack = self.obtener_pack_asociado(articulo_id)
            if pack:
                return 'pack'
                
            return None
            
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error determinando tipo de art√≠culo {articulo_id}: {e}")
            raise
            
    def obtener_estadisticas_articulo(self, articulo_id: int) -> Dict[str, Any]:
        """
        Obtener estad√≠sticas completas de un art√≠culo
        
        Args:
            articulo_id (int): ID del art√≠culo
            
        Returns:
            Dict[str, Any]: Estad√≠sticas del art√≠culo incluyendo:
                - articulo_info: Informaci√≥n b√°sica
                - tipo: Tipo de art√≠culo (producto/pack)
                - familia_info: Informaci√≥n de la familia
        """
        try:
            articulo = self.obtener_por_id(articulo_id)
            if not articulo:
                return {'error': 'Art√≠culo no encontrado'}
                
            # Informaci√≥n b√°sica del art√≠culo
            resultado = {
                'articulo_info': {
                    'id': articulo.id,
                    'nombre': articulo.nombre,
                    'descripcion': articulo.descripcion,
                    'codigo': articulo.codigo,
                    'activo': articulo.activo,
                },
                'tipo': self.obtener_tipo_articulo(articulo_id),
                'fecha_creacion': articulo.created_at,
                'ultima_actualizacion': articulo.updated_at
            }
            
            # Informaci√≥n de la familia
            if articulo.id_familia:
                familia = self.db.query(Familia).filter(Familia.id == articulo.id_familia).first()
                if familia:
                    resultado['familia_info'] = {
                        'id': familia.id,
                        'nombre': familia.nombre,
                        'descripcion': familia.descripcion
                    }
                    
            return resultado
            
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error obteniendo estad√≠sticas de art√≠culo {articulo_id}: {e}")
            raise
            
    def buscar_articulos_por_texto(self, texto: str) -> List[ArticuloResponse]:
        """
        Buscar art√≠culos por texto en nombre, descripci√≥n o c√≥digo
        
        Args:
            texto (str): Texto a buscar
            
        Returns:
            List[ArticuloResponse]: Lista de art√≠culos que coinciden con la b√∫squeda
        """
        try:
            return self.db.query(Articulo).filter(
                (Articulo.nombre.ilike(f'%{texto}%')) |
                (Articulo.descripcion.ilike(f'%{texto}%')) |
                (Articulo.codigo.ilike(f'%{texto}%'))
            ).all()
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error buscando art√≠culos por texto '{texto}': {e}")
            raise
            
    def validar_eliminacion(self, articulo_id: int) -> Dict[str, Any]:
        """
        Validar si un art√≠culo puede ser eliminado
        
        Args:
            articulo_id (int): ID del art√≠culo a validar
            
        Returns:
            Dict[str, Any]: Resultado de la validaci√≥n con:
                - puede_eliminar: bool
                - razon: str (si no puede eliminar)
                - elementos_relacionados: dict con informaci√≥n
        """
        try:
            producto = self.obtener_producto_asociado(articulo_id)
            pack = self.obtener_pack_asociado(articulo_id)
            
            tiene_relaciones = producto is not None or pack is not None
            
            resultado = {
                'puede_eliminar': not tiene_relaciones,
                'elementos_relacionados': {
                    'tiene_producto': producto is not None,
                    'tiene_pack': pack is not None
                }
            }
            
            if tiene_relaciones:
                elementos = []
                if producto:
                    elementos.append('producto')
                if pack:
                    elementos.append('pack')
                resultado['razon'] = f"El art√≠culo tiene asociado: {', '.join(elementos)}"
                
            return resultado
            
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error validando eliminaci√≥n de art√≠culo {articulo_id}: {e}")
            raise
            
    def actualizar_articulo(self, articulo_id: int, articulo_actualizado: ArticuloUpdate) -> Optional[ArticuloResponse]:
        """
        Actualizar un art√≠culo con validaciones
        
        Args:
            articulo_id (int): ID del art√≠culo a actualizar
            articulo_actualizado (ArticuloUpdate): Datos actualizados del art√≠culo
            
        Returns:
            Optional[ArticuloResponse]: Art√≠culo actualizado o None si no existe
            
        Raises:
            ValueError: Si hay errores de validaci√≥n
        """
        try:
            # Verificar si el art√≠culo existe
            articulo_existente = self.obtener_por_id(articulo_id)
            if not articulo_existente:
                raise HTTPException(
                    status_code=404,
                    detail="Art√≠culo no encontrado"
                )
                
            # Validaciones si se proporcionan estos campos
            id_familia = articulo_actualizado.id_familia
            if id_familia:
                familia = self.db.query(Familia).filter(Familia.id == id_familia).first()
                if not familia:
                    raise ValueError(f"La familia con ID {id_familia} no existe")

            codigo = articulo_actualizado.codigo      
            if codigo:
                codigo_existente = self.obtener_por_codigo(codigo)
                if codigo_existente and codigo_existente.id != articulo_id:
                    raise ValueError(f"Ya existe otro art√≠culo con el c√≥digo '{codigo}'")
 
            for key, value in articulo_actualizado.model_dump().items():
                setattr(articulo_existente, key, value)

            self.db.commit()
            self.db.refresh(articulo_existente)

            logger.info(f"‚úÖ Art√≠culo {articulo_id} actualizado exitosamente")
            return articulo_existente
            
        except ValueError:
            raise
        except HTTPException:
            raise
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Error actualizando art√≠culo {articulo_id}: {e}")
            raise
