"""
üöÄ FastAPI Application - Sistema de Inventario Oficit

Aplicaci√≥n principal que coordina todos los endpoints del sistema de inventario.
Organizada por modelos con rutas espec√≠ficas para cada entidad.
"""

from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
import uvicorn

from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session
from sqlalchemy import text
from app.db import SessionLocal

# Importar todos los routers de rutas
from app.routes.familia_router import router as familia_router
from app.routes.pack_router import router as pack_router
from app.routes.proveedor_router import router as proveedor_router
from app.routes.producto_simple_router import router as producto_simple_router
from app.routes.producto_compuesto_router import router as producto_compuesto_router
from app.routes.color_router import router as color_router
from app.routes.componente_router import router as componente_router

# Configuraci√≥n de la aplicaci√≥n
app = FastAPI(
    title="üè¢ Oficit Stock Service",
    description="""
    ## Sistema de Inventario Completo

    API RESTful para gesti√≥n integral de inventario con:
    - üë• Familias y Colores: Organizaci√≥n por categor√≠as
    - üè¢ Proveedores: Gesti√≥n de proveedores y contactos  
    - üì¶ Art√≠culos: Cat√°logo base de productos
    - üîß Componentes: Elementos para productos compuestos
    - üè∑Ô∏è Productos: Simples y compuestos
    - üìä Stock: Control de inventario y movimientos
    - üéØ Coordinador: Operaciones complejas del inventario

    ### Caracter√≠sticas:
    - ‚úÖ CRUD completo para todas las entidades
    - ‚úÖ Relaciones complejas entre modelos
    - ‚úÖ Validaciones de integridad
    - ‚úÖ Reportes y an√°lisis avanzados
    - ‚úÖ Sistema de alertas de stock

    ---
    ## üîí Licencia y uso

    > ‚ö†Ô∏è Este software es propiedad de Tienda Oficit SL. Queda prohibida su copia, distribuci√≥n o uso fuera de la empresa sin autorizaci√≥n expresa.
    """,
    version="1.0.0",
    contact={
        "name": "Tienda Oficit SLU",
    },
    # Ocultar 422 globalmente
    openapi_url="/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc"
)

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    return JSONResponse(
        status_code=400,
        content={"detail": "Datos inv√°lidos en la petici√≥n"}
    )

def get_db():
    """
    üîå Dependencia para obtener sesi√≥n de base de datos
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ==========================================
# ENDPOINT RA√çZ
# ==========================================

@app.get("/", tags=["Sistema"])
def read_root():
    """
    üè† Endpoint ra√≠z - Estado del servicio
    """
    return {
        "servicio": "Oficit Stock Service",
        "version": "1.0.0",
        "estado": "‚úÖ Activo",
        "mensaje": "Sistema de inventario funcionando correctamente",
        "documentacion": app.docs_url,
        "estado_del_sistema": "/health",
        "endpoints_disponibles": {
            "familias": "/familia",
            "colores": "/color",
            "proveedores": "/proveedor",
            "productos_simples": "/producto-simple",
            "productos_compuestos": "/producto-compuesto",
            "componentes": "/componente",
            "packs": "/packs"
        }
    }

@app.get("/health", tags=["Sistema"])
def health_check(db: Session = Depends(get_db)):
    """
    üè• Verificaci√≥n de salud del sistema
    """
    try:
        # Verificar conexi√≥n a base de datos
        q = text('SELECT 1')  # SQL est√°ndar para verificar conexi√≥n
        db.execute(q)
        return {
            "estado": "‚úÖ Saludable",
            "base_datos": "‚úÖ Conectada",
            "timestamp": "2025-07-29T00:00:00Z"
        }
    except Exception as e:
        return {
            "estado": "‚ùå Error",
            "base_datos": "‚ùå Desconectada",
            "error": str(e),
            "timestamp": "2025-07-29T00:00:00Z"
        }

# ==========================================
# REGISTRO DE ROUTERS POR MODELO
# ==========================================

app.include_router(familia_router)
app.include_router(pack_router)
app.include_router(proveedor_router)
app.include_router(producto_simple_router)
app.include_router(producto_compuesto_router)
app.include_router(color_router)
app.include_router(componente_router)

# ==========================================
# CONFIGURACI√ìN ADICIONAL
# ==========================================

# Middleware para CORS (si es necesario)
# from fastapi.middleware.cors import CORSMiddleware
# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=["*"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

if __name__ == "__main__":
    uvicorn.run(
        "app.main:app", 
        host="localhost", 
        port=8000, 
        reload=True,
        log_level="info"
    )
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )