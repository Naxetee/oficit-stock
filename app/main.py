"""
üöÄ FastAPI Application - Sistema de Inventario Oficit

Aplicaci√≥n principal que coordina todos los endpoints del sistema de inventario.
Organizada por modelos con rutas espec√≠ficas para cada entidad.
"""

from fastapi.responses import HTMLResponse, RedirectResponse
import uvicorn
from dotenv import load_dotenv
import os

from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session
from sqlalchemy import text
from app.db import engine
from fastapi.staticfiles import StaticFiles
from starlette.authentication import (
    AuthenticationBackend
)
from starlette.middleware.sessions import SessionMiddleware

# Importar todos los routers de rutas
from app.routes.articulo_router import router as articulo_router
from app.routes.stock_router import router as stock_router
from app.routes.familia_router import router as familia_router
from app.routes.proveedor_router import router as proveedor_router
from app.routes.color_router import router as color_router
from app.routes.componente_router import router as componente_router
from app.admin.sqladmin_setup import CustomAdmin, register_admin_views

# Importar la funci√≥n get_db para inyecci√≥n de dependencias
from app.db import get_db

# Configuraci√≥n de la aplicaci√≥n
app = FastAPI(
    title="üè¢ Oficit Stock Service",
    description="""
    ## Sistema de Inventario Completo

    API RESTful para gesti√≥n integral de inventario con:
    - üë• Familias y Colores: Organizaci√≥n por categor√≠as
    - üè¢ Proveedores: Gesti√≥n de proveedores y contactos  
    - üì¶ Art√≠culos: Cat√°logo base de productos (simples, compuestos y packs)
    - üîß Componentes: Elementos para productos compuestos
    - üè∑Ô∏è Productos: Simples y compuestos
    - üìä Stock: Control de inventario y movimientos
    - üéØ Coordinador: Operaciones complejas del inventario
    - üõ†Ô∏è Panel de administraci√≥n SQLAdmin en `/admin`

    ### Caracter√≠sticas:
    - ‚úÖ CRUD completo para todas las entidades
    - ‚úÖ Relaciones complejas entre modelos
    - ‚úÖ Validaciones de integridad
    - ‚úÖ Reportes y an√°lisis avanzados
    - ‚úÖ Sistema de alertas de stock
    - ‚úÖ Panel de administraci√≥n visual SQLAdmin

    ---
    ## üîí Licencia y uso

    > ‚ö†Ô∏è Este software es propiedad de Tienda Oficit SL. Queda prohibida su copia, distribuci√≥n o uso fuera de la empresa sin autorizaci√≥n expresa.
    """,
    version="1.0.0",
    contact={
        "name": "Tienda Oficit SLU",
    },
    openapi_url="/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc"
)

# A√±ade soporte de sesiones
app.add_middleware(SessionMiddleware, secret_key="oficit-secret-key")

# Montar la carpeta de archivos est√°ticos
app.mount("/static", StaticFiles(directory="app/admin/static"), name="static")

# ==========================================
# AUTENTICACI√ìN PARA ADMIN
# ==========================================
from sqladmin.authentication import AuthenticationBackend

load_dotenv()
ADMIN_USER = os.getenv("ADMIN_USER")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

class OficitAuthBackend(AuthenticationBackend):
    def __init__(self, secret_key: str):
        super().__init__(secret_key=secret_key)

    async def authenticate(self, request):
        user = request.session.get("user")
        if user:
            return user
        return None

    async def login(self, request):
        if request.method == "GET":
            error = request.query_params.get("error")
            return HTMLResponse(f"""
            <html>
                <head>
                    <title>Login Oficit</title>
                    <link rel="stylesheet" href="/static/custom.css">
                </head>
                <body style="background:#f5f6fa;">
                    <div style="max-width:400px;margin:80px auto;padding:2em;background:white;border-radius:8px;box-shadow:0 2px 8px #0001;">
                        <h2>Iniciar sesi√≥n</h2>
                        {f'<div style="color:red;">{error}</div>' if error else ''}
                        <form method="post">
                            <input name="username" placeholder="Usuario" style="width:100%;margin-bottom:1em;padding:0.5em;">
                            <input name="password" type="password" placeholder="Contrase√±a" style="width:100%;margin-bottom:1em;padding:0.5em;">
                            <button type="submit" style="width:100%;padding:0.5em;background:#0e7490;color:white;border:none;">Entrar</button>
                        </form>
                    </div>
                </body>
            </html>
            """)
        else:
            form = await request.form()
            username = form.get("username")
            password = form.get("password")
            if username == ADMIN_USER and password == ADMIN_PASSWORD:
                request.session["user"] = username
                return RedirectResponse(url="/admin", status_code=302)
            return RedirectResponse(url="/admin/login?error=Credenciales+incorrectas", status_code=302)

    async def logout(self, request):
        request.session.clear()
        return RedirectResponse(url="/admin/login", status_code=302)

# ==========================================
# SQLAdmin Panel
# ==========================================
admin = CustomAdmin(
    app,
    engine,
    base_url="/admin",
    authentication_backend=OficitAuthBackend(secret_key="oficit-secret-key"),
)


# Importa y registra las vistas de SQLAdmin
register_admin_views(admin)

# ====

# Favicon handler para evitar 404 de navegadores
from fastapi.responses import FileResponse

@app.get("/favicon.ico")
def favicon():
    return FileResponse("app/admin/static/favicon.ico")

# ENDPOINT RA√çZ
# ====

# ==========================================
# ENDPOINT RA√çZ
# ==========================================

@app.get("/", tags=["Sistema"])
def read_root():
    """
    üè† Endpoint ra√≠z - Estado del servicio
    """
    return {
        "servicio": "Oficit Stock Service",
        "version": "1.0.0",
        "estado": "‚úÖ Activo",
        "mensaje": "Sistema de inventario funcionando correctamente",
        "documentacion": app.docs_url,
        "estado_del_sistema": "/health",
        "endpoints_disponibles": {
            "familia": "/familia",
            "color": "/color",
            "proveedor": "/proveedor",
            "componente": "/componente",
            "articulo": "/articulo"
        }
    }

@app.get("/health", tags=["Sistema"])
def health_check(db: Session = Depends(get_db)):
    """
    üè• Verificaci√≥n de salud del sistema
    """
    try:
        # Verificar conexi√≥n a base de datos
        q = text('SELECT 1')  # SQL est√°ndar para verificar conexi√≥n
        db.execute(q)
        return {
            "estado": "‚úÖ Saludable",
            "base_datos": "‚úÖ Conectada",
            "timestamp": "2025-07-29T00:00:00Z"
        }
    except Exception as e:
        return {
            "estado": "‚ùå Error",
            "base_datos": "‚ùå Desconectada",
            "error": str(e),
            "timestamp": "2025-07-29T00:00:00Z"
        }

# ==========================================
# REGISTRO DE ROUTERS POR MODELO
# ==========================================

app.include_router(familia_router)
app.include_router(articulo_router)
app.include_router(proveedor_router)
app.include_router(color_router)
app.include_router(componente_router)
app.include_router(stock_router)

# ==========================================
# CONFIGURACI√ìN ADICIONAL
# ==========================================

# Middleware para CORS (si es necesario)
# from fastapi.middleware.cors import CORSMiddleware
# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=["*"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

if __name__ == "__main__":
    uvicorn.run(
        "app.main:app", 
        host="localhost", 
        port=8000, 
        reload=True,
        log_level="info"
    )
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )